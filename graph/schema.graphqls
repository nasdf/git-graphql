interface Object {
  hash: ID!
  type: String!
}

type Signature {
  name: String!
  email: String!
  when: String!
}

type Commit implements Object {
  hash: ID!
  type: String!
  author: Signature!
  committer: Signature!
  signature: String!
  message: String!
  tree: Tree!
  treeHash: String!
  parents: [Commit!]!
  parentHashes: [String!]!
}

type TreeEntry {
  hash: ID!
  name: String!
  mode: String!
  object: Object!
}

type Tree implements Object {
  hash: ID!
  type: String!
  entries: [TreeEntry!]!
}

type Blob implements Object {
  hash: ID!
  type: String!
  data: String!
}

type Query {
  commit(hash: ID!): Commit
  blob(hash: ID!): Blob
  tree(hash: ID!): Tree
  revision(name: String!): Commit
  commits: [Commit!]!
}